; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\stm32f10x_it.o --depend=..\OBJ\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\USER\INC -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\stm32f10x_it.crf ..\..\USER\SRC\stm32f10x_it.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NMI_Handler PROC
;;;42     *******************************************************************************/
;;;43     void NMI_Handler(void)
000000  4770              BX       lr
;;;44     {
;;;45     }
;;;46     
                          ENDP

                  HardFault_Handler PROC
;;;53     *******************************************************************************/
;;;54     void HardFault_Handler(void)
000002  bf00              NOP      
                  |L1.4|
;;;55     {
;;;56       /* Go to infinite loop when Hard Fault exception occurs */
;;;57       while (1)
000004  e7fe              B        |L1.4|
;;;58       {
;;;59       }
;;;60     }
;;;61     
                          ENDP

                  MemManage_Handler PROC
;;;68     *******************************************************************************/
;;;69     void MemManage_Handler(void)
000006  bf00              NOP      
                  |L1.8|
;;;70     {
;;;71       /* Go to infinite loop when Memory Manage exception occurs */
;;;72       while (1)
000008  e7fe              B        |L1.8|
;;;73       {
;;;74       }
;;;75     }
;;;76     
                          ENDP

                  BusFault_Handler PROC
;;;83     *******************************************************************************/
;;;84     void BusFault_Handler(void)
00000a  bf00              NOP      
                  |L1.12|
;;;85     {
;;;86       /* Go to infinite loop when Bus Fault exception occurs */
;;;87       while (1)
00000c  e7fe              B        |L1.12|
;;;88       {
;;;89       }
;;;90     }
;;;91     
                          ENDP

                  UsageFault_Handler PROC
;;;98     *******************************************************************************/
;;;99     void UsageFault_Handler(void)
00000e  bf00              NOP      
                  |L1.16|
;;;100    {
;;;101      /* Go to infinite loop when Usage Fault exception occurs */
;;;102      while (1)
000010  e7fe              B        |L1.16|
;;;103      {
;;;104      }
;;;105    }
;;;106    
                          ENDP

                  SVC_Handler PROC
;;;113    *******************************************************************************/
;;;114    void SVC_Handler(void)
000012  4770              BX       lr
;;;115    {
;;;116    }
;;;117    
                          ENDP

                  DebugMon_Handler PROC
;;;124    *******************************************************************************/
;;;125    void DebugMon_Handler(void)
000014  4770              BX       lr
;;;126    {
;;;127    }
;;;128    
                          ENDP

                  PendSV_Handler PROC
;;;135    *******************************************************************************/
;;;136    void PendSV_Handler(void)
000016  4770              BX       lr
;;;137    {
;;;138    }
;;;139    
                          ENDP

                  SysTick_Handler PROC
;;;146    *******************************************************************************/
;;;147    void SysTick_Handler(void)
000018  4770              BX       lr
;;;148    {
;;;149    }
;;;150    
                          ENDP

                  USB_HP_CAN1_TX_IRQHandler PROC
;;;163    *******************************************************************************/
;;;164    void USB_HP_CAN1_TX_IRQHandler(void)
00001a  4770              BX       lr
;;;165    {
;;;166      //CTR_HP();
;;;167    }
;;;168    
                          ENDP

                  USB_LP_CAN1_RX0_IRQHandler PROC
;;;176    *******************************************************************************/
;;;177    void USB_LP_CAN1_RX0_IRQHandler(void)
00001c  4770              BX       lr
;;;178    {
;;;179      //USB_Istr();
;;;180    }
;;;181    #endif /* STM32F10X_CL */
                          ENDP

                  SDIO_IRQHandler PROC
;;;191    *******************************************************************************/
;;;192    void SDIO_IRQHandler(void)
00001e  4770              BX       lr
;;;193    { 
;;;194      /* Process All SDIO Interrupt Sources */
;;;195      //SD_ProcessIRQSrc();
;;;196      
;;;197    }
;;;198    #endif /* STM32F10X_HD | STM32F10X_XL*/
                          ENDP

                  USART1_IRQHandler PROC
;;;221    
;;;222    void USART_COM1_IRQHandler(void)
000020  b510              PUSH     {r4,lr}
;;;223    {
;;;224    	USART1_RxIntHandler();
000022  f7fffffe          BL       USART1_RxIntHandler
;;;225    }
000026  bd10              POP      {r4,pc}
;;;226    
                          ENDP

                  USART2_IRQHandler PROC
;;;227    void USART_COM2_IRQHandler(void)
000028  b510              PUSH     {r4,lr}
;;;228    {
;;;229      	USART2_RxIntHandler();
00002a  f7fffffe          BL       USART2_RxIntHandler
;;;230    }
00002e  bd10              POP      {r4,pc}
;;;231    
                          ENDP

                  EXTI4_IRQHandler PROC
;;;232    void EXTI4_IRQHandler(void)
000030  b510              PUSH     {r4,lr}
;;;233    {
;;;234      	EXTI->IMR&=~(1<<4);	
000032  4830              LDR      r0,|L1.244|
000034  6800              LDR      r0,[r0,#0]
000036  f0200010          BIC      r0,r0,#0x10
00003a  492f              LDR      r1,|L1.248|
00003c  f8c10400          STR      r0,[r1,#0x400]
;;;235    	EXTI->EMR&=~(1<<4);
000040  4608              MOV      r0,r1
000042  f8d00404          LDR      r0,[r0,#0x404]
000046  f0200010          BIC      r0,r0,#0x10
00004a  f8c10404          STR      r0,[r1,#0x404]
;;;236    
;;;237    	GPIOA->ODR ^= (1 << 3);
00004e  4608              MOV      r0,r1
000050  f8d0080c          LDR      r0,[r0,#0x80c]
000054  f0800008          EOR      r0,r0,#8
000058  4928              LDR      r1,|L1.252|
00005a  6008              STR      r0,[r1,#0]
;;;238    
;;;239    	Cmos_CS=1;
00005c  f04f0001          MOV      r0,#1
000060  4927              LDR      r1,|L1.256|
000062  6008              STR      r0,[r1,#0]
;;;240    	WriteControl=1;	  		
000064  4927              LDR      r1,|L1.260|
000066  f8c101b4          STR      r0,[r1,#0x1b4]
;;;241    	
;;;242    	LCD_WriteReg(0x0003,0x1018);//初始化TFT显示
00006a  f2410118          MOV      r1,#0x1018
00006e  f04f0003          MOV      r0,#3
000072  f7fffffe          BL       LCD_WriteReg
;;;243    	LCD_WriteReg(0x0050,0x0000); 
000076  2100              MOVS     r1,#0
000078  2050              MOVS     r0,#0x50
00007a  f7fffffe          BL       LCD_WriteReg
;;;244    	LCD_WriteReg(0x0051,0x00ef);
00007e  21ef              MOVS     r1,#0xef
000080  2051              MOVS     r0,#0x51
000082  f7fffffe          BL       LCD_WriteReg
;;;245    	LCD_WriteReg(0x0052,0x0000);
000086  2100              MOVS     r1,#0
000088  2052              MOVS     r0,#0x52
00008a  f7fffffe          BL       LCD_WriteReg
;;;246    	LCD_WriteReg(0x0053,0x013f);
00008e  f240113f          MOV      r1,#0x13f
000092  2053              MOVS     r0,#0x53
000094  f7fffffe          BL       LCD_WriteReg
;;;247    	LCD_WriteReg(0x0020,0x0000);
000098  2100              MOVS     r1,#0
00009a  2020              MOVS     r0,#0x20
00009c  f7fffffe          BL       LCD_WriteReg
;;;248    	LCD_WriteReg(0x0021,0x013f); 
0000a0  f240113f          MOV      r1,#0x13f
0000a4  2021              MOVS     r0,#0x21
0000a6  f7fffffe          BL       LCD_WriteReg
;;;249    	LCD_WriteRAM_Prepare();	
0000aa  f7fffffe          BL       LCD_WriteRAM_Prepare
;;;250    	
;;;251    	LCD_RS=1;//高为数据，低为指令
0000ae  2001              MOVS     r0,#1
0000b0  4915              LDR      r1,|L1.264|
0000b2  6008              STR      r0,[r1,#0]
;;;252    	LCD_RD=1;
0000b4  4915              LDR      r1,|L1.268|
0000b6  6008              STR      r0,[r1,#0]
;;;253    	LCD_WR=0;
0000b8  f04f0000          MOV      r0,#0
0000bc  f1010104          ADD      r1,r1,#4
0000c0  6008              STR      r0,[r1,#0]
;;;254    	
;;;255    	Cmos_CS=0;
0000c2  490f              LDR      r1,|L1.256|
0000c4  6008              STR      r0,[r1,#0]
;;;256    	WriteControl=0;
0000c6  490f              LDR      r1,|L1.260|
0000c8  f8c101b4          STR      r0,[r1,#0x1b4]
;;;257    	
;;;258    	EXTI->EMR|=(1<<4);
0000cc  480a              LDR      r0,|L1.248|
0000ce  f8d00404          LDR      r0,[r0,#0x404]
0000d2  f0400010          ORR      r0,r0,#0x10
0000d6  4908              LDR      r1,|L1.248|
0000d8  f8c10404          STR      r0,[r1,#0x404]
;;;259    	EXTI->IMR|=(1<<4);
0000dc  4608              MOV      r0,r1
0000de  f8d00400          LDR      r0,[r0,#0x400]
0000e2  f0400010          ORR      r0,r0,#0x10
0000e6  4903              LDR      r1,|L1.244|
0000e8  6008              STR      r0,[r1,#0]
;;;260    	
;;;261    	EXTI_ClearITPendingBit(EXTI_Line4);  		//清除EXTI4线路挂起位					
0000ea  f04f0010          MOV      r0,#0x10
0000ee  f7fffffe          BL       EXTI_ClearITPendingBit
;;;262    		
;;;263    }
0000f2  bd10              POP      {r4,pc}
;;;264    
                          ENDP

                  |L1.244|
                          DCD      0x40010400
                  |L1.248|
                          DCD      0x40010000
                  |L1.252|
                          DCD      0x4001080c
                  |L1.256|
                          DCD      0x422101ac
                  |L1.260|
                          DCD      0x42220000
                  |L1.264|
                          DCD      0x422201a0
                  |L1.268|
                          DCD      0x42220198

                          AREA ||.data||, DATA, ALIGN=0

                  VsyncActive
000000  00                DCB      0x00
